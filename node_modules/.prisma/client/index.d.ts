
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Courses
 * 
 */
export type Courses = $Result.DefaultSelection<Prisma.$CoursesPayload>
/**
 * Model Lessons
 * 
 */
export type Lessons = $Result.DefaultSelection<Prisma.$LessonsPayload>
/**
 * Model Enrollments
 * 
 */
export type Enrollments = $Result.DefaultSelection<Prisma.$EnrollmentsPayload>
/**
 * Model StatusEnrollments
 * 
 */
export type StatusEnrollments = $Result.DefaultSelection<Prisma.$StatusEnrollmentsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Courses
 * const courses = await prisma.courses.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Courses
   * const courses = await prisma.courses.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.courses`: Exposes CRUD operations for the **Courses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.courses.findMany()
    * ```
    */
  get courses(): Prisma.CoursesDelegate<ExtArgs>;

  /**
   * `prisma.lessons`: Exposes CRUD operations for the **Lessons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lessons.findMany()
    * ```
    */
  get lessons(): Prisma.LessonsDelegate<ExtArgs>;

  /**
   * `prisma.enrollments`: Exposes CRUD operations for the **Enrollments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollments.findMany()
    * ```
    */
  get enrollments(): Prisma.EnrollmentsDelegate<ExtArgs>;

  /**
   * `prisma.statusEnrollments`: Exposes CRUD operations for the **StatusEnrollments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusEnrollments
    * const statusEnrollments = await prisma.statusEnrollments.findMany()
    * ```
    */
  get statusEnrollments(): Prisma.StatusEnrollmentsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Courses: 'Courses',
    Lessons: 'Lessons',
    Enrollments: 'Enrollments',
    StatusEnrollments: 'StatusEnrollments'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "courses" | "lessons" | "enrollments" | "statusEnrollments"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Courses: {
        payload: Prisma.$CoursesPayload<ExtArgs>
        fields: Prisma.CoursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoursesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoursesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          findFirst: {
            args: Prisma.CoursesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoursesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          findMany: {
            args: Prisma.CoursesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          create: {
            args: Prisma.CoursesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          createMany: {
            args: Prisma.CoursesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoursesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>[]
          }
          delete: {
            args: Prisma.CoursesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          update: {
            args: Prisma.CoursesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          deleteMany: {
            args: Prisma.CoursesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoursesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CoursesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesPayload>
          }
          aggregate: {
            args: Prisma.CoursesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourses>
          }
          groupBy: {
            args: Prisma.CoursesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoursesCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesCountAggregateOutputType> | number
          }
        }
      }
      Lessons: {
        payload: Prisma.$LessonsPayload<ExtArgs>
        fields: Prisma.LessonsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          findFirst: {
            args: Prisma.LessonsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          findMany: {
            args: Prisma.LessonsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>[]
          }
          create: {
            args: Prisma.LessonsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          createMany: {
            args: Prisma.LessonsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>[]
          }
          delete: {
            args: Prisma.LessonsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          update: {
            args: Prisma.LessonsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          deleteMany: {
            args: Prisma.LessonsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LessonsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          aggregate: {
            args: Prisma.LessonsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessons>
          }
          groupBy: {
            args: Prisma.LessonsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonsCountArgs<ExtArgs>
            result: $Utils.Optional<LessonsCountAggregateOutputType> | number
          }
        }
      }
      Enrollments: {
        payload: Prisma.$EnrollmentsPayload<ExtArgs>
        fields: Prisma.EnrollmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          findMany: {
            args: Prisma.EnrollmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>[]
          }
          create: {
            args: Prisma.EnrollmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          createMany: {
            args: Prisma.EnrollmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnrollmentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>[]
          }
          delete: {
            args: Prisma.EnrollmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          update: {
            args: Prisma.EnrollmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnrollmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentsPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnrollments>
          }
          groupBy: {
            args: Prisma.EnrollmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentsCountArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentsCountAggregateOutputType> | number
          }
        }
      }
      StatusEnrollments: {
        payload: Prisma.$StatusEnrollmentsPayload<ExtArgs>
        fields: Prisma.StatusEnrollmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusEnrollmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusEnrollmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload>
          }
          findFirst: {
            args: Prisma.StatusEnrollmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusEnrollmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload>
          }
          findMany: {
            args: Prisma.StatusEnrollmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload>[]
          }
          create: {
            args: Prisma.StatusEnrollmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload>
          }
          createMany: {
            args: Prisma.StatusEnrollmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StatusEnrollmentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload>[]
          }
          delete: {
            args: Prisma.StatusEnrollmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload>
          }
          update: {
            args: Prisma.StatusEnrollmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload>
          }
          deleteMany: {
            args: Prisma.StatusEnrollmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusEnrollmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StatusEnrollmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusEnrollmentsPayload>
          }
          aggregate: {
            args: Prisma.StatusEnrollmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusEnrollments>
          }
          groupBy: {
            args: Prisma.StatusEnrollmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusEnrollmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusEnrollmentsCountArgs<ExtArgs>
            result: $Utils.Optional<StatusEnrollmentsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CoursesCountOutputType
   */

  export type CoursesCountOutputType = {
    lessons: number
    enrollments: number
  }

  export type CoursesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | CoursesCountOutputTypeCountLessonsArgs
    enrollments?: boolean | CoursesCountOutputTypeCountEnrollmentsArgs
  }

  // Custom InputTypes
  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesCountOutputType
     */
    select?: CoursesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountLessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonsWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
  }


  /**
   * Count Type StatusEnrollmentsCountOutputType
   */

  export type StatusEnrollmentsCountOutputType = {
    enrollments: number
  }

  export type StatusEnrollmentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | StatusEnrollmentsCountOutputTypeCountEnrollmentsArgs
  }

  // Custom InputTypes
  /**
   * StatusEnrollmentsCountOutputType without action
   */
  export type StatusEnrollmentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollmentsCountOutputType
     */
    select?: StatusEnrollmentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusEnrollmentsCountOutputType without action
   */
  export type StatusEnrollmentsCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Courses
   */

  export type AggregateCourses = {
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  export type CoursesAvgAggregateOutputType = {
    author_id: number | null
  }

  export type CoursesSumAggregateOutputType = {
    author_id: number | null
  }

  export type CoursesMinAggregateOutputType = {
    id: string | null
    author_id: number | null
    title: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CoursesMaxAggregateOutputType = {
    id: string | null
    author_id: number | null
    title: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CoursesCountAggregateOutputType = {
    id: number
    author_id: number
    title: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CoursesAvgAggregateInputType = {
    author_id?: true
  }

  export type CoursesSumAggregateInputType = {
    author_id?: true
  }

  export type CoursesMinAggregateInputType = {
    id?: true
    author_id?: true
    title?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type CoursesMaxAggregateInputType = {
    id?: true
    author_id?: true
    title?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type CoursesCountAggregateInputType = {
    id?: true
    author_id?: true
    title?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to aggregate.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoursesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoursesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesMaxAggregateInputType
  }

  export type GetCoursesAggregateType<T extends CoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourses[P]>
      : GetScalarType<T[P], AggregateCourses[P]>
  }




  export type CoursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesWhereInput
    orderBy?: CoursesOrderByWithAggregationInput | CoursesOrderByWithAggregationInput[]
    by: CoursesScalarFieldEnum[] | CoursesScalarFieldEnum
    having?: CoursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesCountAggregateInputType | true
    _avg?: CoursesAvgAggregateInputType
    _sum?: CoursesSumAggregateInputType
    _min?: CoursesMinAggregateInputType
    _max?: CoursesMaxAggregateInputType
  }

  export type CoursesGroupByOutputType = {
    id: string
    author_id: number
    title: string
    description: string | null
    created_at: Date
    updated_at: Date
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  type GetCoursesGroupByPayload<T extends CoursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesGroupByOutputType[P]>
        }
      >
    >


  export type CoursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    author_id?: boolean
    title?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    lessons?: boolean | Courses$lessonsArgs<ExtArgs>
    enrollments?: boolean | Courses$enrollmentsArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    author_id?: boolean
    title?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["courses"]>

  export type CoursesSelectScalar = {
    id?: boolean
    author_id?: boolean
    title?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CoursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | Courses$lessonsArgs<ExtArgs>
    enrollments?: boolean | Courses$enrollmentsArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoursesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Courses"
    objects: {
      lessons: Prisma.$LessonsPayload<ExtArgs>[]
      enrollments: Prisma.$EnrollmentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      author_id: number
      title: string
      description: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["courses"]>
    composites: {}
  }

  type CoursesGetPayload<S extends boolean | null | undefined | CoursesDefaultArgs> = $Result.GetResult<Prisma.$CoursesPayload, S>

  type CoursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoursesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoursesCountAggregateInputType | true
    }

  export interface CoursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Courses'], meta: { name: 'Courses' } }
    /**
     * Find zero or one Courses that matches the filter.
     * @param {CoursesFindUniqueArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoursesFindUniqueArgs>(args: SelectSubset<T, CoursesFindUniqueArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Courses that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CoursesFindUniqueOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoursesFindUniqueOrThrowArgs>(args: SelectSubset<T, CoursesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindFirstArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoursesFindFirstArgs>(args?: SelectSubset<T, CoursesFindFirstArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Courses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindFirstOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoursesFindFirstOrThrowArgs>(args?: SelectSubset<T, CoursesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.courses.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.courses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coursesWithIdOnly = await prisma.courses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoursesFindManyArgs>(args?: SelectSubset<T, CoursesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Courses.
     * @param {CoursesCreateArgs} args - Arguments to create a Courses.
     * @example
     * // Create one Courses
     * const Courses = await prisma.courses.create({
     *   data: {
     *     // ... data to create a Courses
     *   }
     * })
     * 
     */
    create<T extends CoursesCreateArgs>(args: SelectSubset<T, CoursesCreateArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CoursesCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoursesCreateManyArgs>(args?: SelectSubset<T, CoursesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CoursesCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const coursesWithIdOnly = await prisma.courses.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoursesCreateManyAndReturnArgs>(args?: SelectSubset<T, CoursesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Courses.
     * @param {CoursesDeleteArgs} args - Arguments to delete one Courses.
     * @example
     * // Delete one Courses
     * const Courses = await prisma.courses.delete({
     *   where: {
     *     // ... filter to delete one Courses
     *   }
     * })
     * 
     */
    delete<T extends CoursesDeleteArgs>(args: SelectSubset<T, CoursesDeleteArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Courses.
     * @param {CoursesUpdateArgs} args - Arguments to update one Courses.
     * @example
     * // Update one Courses
     * const courses = await prisma.courses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoursesUpdateArgs>(args: SelectSubset<T, CoursesUpdateArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CoursesDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.courses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoursesDeleteManyArgs>(args?: SelectSubset<T, CoursesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoursesUpdateManyArgs>(args: SelectSubset<T, CoursesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Courses.
     * @param {CoursesUpsertArgs} args - Arguments to update or create a Courses.
     * @example
     * // Update or create a Courses
     * const courses = await prisma.courses.upsert({
     *   create: {
     *     // ... data to create a Courses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courses we want to update
     *   }
     * })
     */
    upsert<T extends CoursesUpsertArgs>(args: SelectSubset<T, CoursesUpsertArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.courses.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CoursesCountArgs>(
      args?: Subset<T, CoursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAggregateArgs>(args: Subset<T, CoursesAggregateArgs>): Prisma.PrismaPromise<GetCoursesAggregateType<T>>

    /**
     * Group by Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoursesGroupByArgs['orderBy'] }
        : { orderBy?: CoursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Courses model
   */
  readonly fields: CoursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Courses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lessons<T extends Courses$lessonsArgs<ExtArgs> = {}>(args?: Subset<T, Courses$lessonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findMany"> | Null>
    enrollments<T extends Courses$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Courses$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Courses model
   */ 
  interface CoursesFieldRefs {
    readonly id: FieldRef<"Courses", 'String'>
    readonly author_id: FieldRef<"Courses", 'Int'>
    readonly title: FieldRef<"Courses", 'String'>
    readonly description: FieldRef<"Courses", 'String'>
    readonly created_at: FieldRef<"Courses", 'DateTime'>
    readonly updated_at: FieldRef<"Courses", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Courses findUnique
   */
  export type CoursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses findUniqueOrThrow
   */
  export type CoursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses findFirst
   */
  export type CoursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses findFirstOrThrow
   */
  export type CoursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses findMany
   */
  export type CoursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CoursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CoursesOrderByWithRelationInput | CoursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CoursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * Courses create
   */
  export type CoursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The data needed to create a Courses.
     */
    data: XOR<CoursesCreateInput, CoursesUncheckedCreateInput>
  }

  /**
   * Courses createMany
   */
  export type CoursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CoursesCreateManyInput | CoursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Courses createManyAndReturn
   */
  export type CoursesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CoursesCreateManyInput | CoursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Courses update
   */
  export type CoursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The data needed to update a Courses.
     */
    data: XOR<CoursesUpdateInput, CoursesUncheckedUpdateInput>
    /**
     * Choose, which Courses to update.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses updateMany
   */
  export type CoursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CoursesUpdateManyMutationInput, CoursesUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CoursesWhereInput
  }

  /**
   * Courses upsert
   */
  export type CoursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * The filter to search for the Courses to update in case it exists.
     */
    where: CoursesWhereUniqueInput
    /**
     * In case the Courses found by the `where` argument doesn't exist, create a new Courses with this data.
     */
    create: XOR<CoursesCreateInput, CoursesUncheckedCreateInput>
    /**
     * In case the Courses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoursesUpdateInput, CoursesUncheckedUpdateInput>
  }

  /**
   * Courses delete
   */
  export type CoursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
    /**
     * Filter which Courses to delete.
     */
    where: CoursesWhereUniqueInput
  }

  /**
   * Courses deleteMany
   */
  export type CoursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CoursesWhereInput
  }

  /**
   * Courses.lessons
   */
  export type Courses$lessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    where?: LessonsWhereInput
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    cursor?: LessonsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Courses.enrollments
   */
  export type Courses$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    cursor?: EnrollmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * Courses without action
   */
  export type CoursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Courses
     */
    select?: CoursesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesInclude<ExtArgs> | null
  }


  /**
   * Model Lessons
   */

  export type AggregateLessons = {
    _count: LessonsCountAggregateOutputType | null
    _min: LessonsMinAggregateOutputType | null
    _max: LessonsMaxAggregateOutputType | null
  }

  export type LessonsMinAggregateOutputType = {
    id: string | null
    course_id: string | null
    title: string | null
    description: string | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LessonsMaxAggregateOutputType = {
    id: string | null
    course_id: string | null
    title: string | null
    description: string | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LessonsCountAggregateOutputType = {
    id: number
    course_id: number
    title: number
    description: number
    content: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LessonsMinAggregateInputType = {
    id?: true
    course_id?: true
    title?: true
    description?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type LessonsMaxAggregateInputType = {
    id?: true
    course_id?: true
    title?: true
    description?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type LessonsCountAggregateInputType = {
    id?: true
    course_id?: true
    title?: true
    description?: true
    content?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LessonsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lessons to aggregate.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lessons
    **/
    _count?: true | LessonsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonsMaxAggregateInputType
  }

  export type GetLessonsAggregateType<T extends LessonsAggregateArgs> = {
        [P in keyof T & keyof AggregateLessons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessons[P]>
      : GetScalarType<T[P], AggregateLessons[P]>
  }




  export type LessonsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonsWhereInput
    orderBy?: LessonsOrderByWithAggregationInput | LessonsOrderByWithAggregationInput[]
    by: LessonsScalarFieldEnum[] | LessonsScalarFieldEnum
    having?: LessonsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonsCountAggregateInputType | true
    _min?: LessonsMinAggregateInputType
    _max?: LessonsMaxAggregateInputType
  }

  export type LessonsGroupByOutputType = {
    id: string
    course_id: string
    title: string
    description: string | null
    content: string
    created_at: Date
    updated_at: Date
    _count: LessonsCountAggregateOutputType | null
    _min: LessonsMinAggregateOutputType | null
    _max: LessonsMaxAggregateOutputType | null
  }

  type GetLessonsGroupByPayload<T extends LessonsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonsGroupByOutputType[P]>
            : GetScalarType<T[P], LessonsGroupByOutputType[P]>
        }
      >
    >


  export type LessonsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course_id?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type LessonsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    course_id?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type LessonsSelectScalar = {
    id?: boolean
    course_id?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LessonsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }
  export type LessonsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
  }

  export type $LessonsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lessons"
    objects: {
      course: Prisma.$CoursesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      course_id: string
      title: string
      description: string | null
      content: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["lessons"]>
    composites: {}
  }

  type LessonsGetPayload<S extends boolean | null | undefined | LessonsDefaultArgs> = $Result.GetResult<Prisma.$LessonsPayload, S>

  type LessonsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LessonsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LessonsCountAggregateInputType | true
    }

  export interface LessonsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lessons'], meta: { name: 'Lessons' } }
    /**
     * Find zero or one Lessons that matches the filter.
     * @param {LessonsFindUniqueArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonsFindUniqueArgs>(args: SelectSubset<T, LessonsFindUniqueArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Lessons that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LessonsFindUniqueOrThrowArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonsFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindFirstArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonsFindFirstArgs>(args?: SelectSubset<T, LessonsFindFirstArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Lessons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindFirstOrThrowArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonsFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonsFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lessons
     * const lessons = await prisma.lessons.findMany()
     * 
     * // Get first 10 Lessons
     * const lessons = await prisma.lessons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonsWithIdOnly = await prisma.lessons.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonsFindManyArgs>(args?: SelectSubset<T, LessonsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Lessons.
     * @param {LessonsCreateArgs} args - Arguments to create a Lessons.
     * @example
     * // Create one Lessons
     * const Lessons = await prisma.lessons.create({
     *   data: {
     *     // ... data to create a Lessons
     *   }
     * })
     * 
     */
    create<T extends LessonsCreateArgs>(args: SelectSubset<T, LessonsCreateArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Lessons.
     * @param {LessonsCreateManyArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lessons = await prisma.lessons.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonsCreateManyArgs>(args?: SelectSubset<T, LessonsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lessons and returns the data saved in the database.
     * @param {LessonsCreateManyAndReturnArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lessons = await prisma.lessons.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lessons and only return the `id`
     * const lessonsWithIdOnly = await prisma.lessons.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonsCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Lessons.
     * @param {LessonsDeleteArgs} args - Arguments to delete one Lessons.
     * @example
     * // Delete one Lessons
     * const Lessons = await prisma.lessons.delete({
     *   where: {
     *     // ... filter to delete one Lessons
     *   }
     * })
     * 
     */
    delete<T extends LessonsDeleteArgs>(args: SelectSubset<T, LessonsDeleteArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Lessons.
     * @param {LessonsUpdateArgs} args - Arguments to update one Lessons.
     * @example
     * // Update one Lessons
     * const lessons = await prisma.lessons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonsUpdateArgs>(args: SelectSubset<T, LessonsUpdateArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Lessons.
     * @param {LessonsDeleteManyArgs} args - Arguments to filter Lessons to delete.
     * @example
     * // Delete a few Lessons
     * const { count } = await prisma.lessons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonsDeleteManyArgs>(args?: SelectSubset<T, LessonsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lessons
     * const lessons = await prisma.lessons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonsUpdateManyArgs>(args: SelectSubset<T, LessonsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lessons.
     * @param {LessonsUpsertArgs} args - Arguments to update or create a Lessons.
     * @example
     * // Update or create a Lessons
     * const lessons = await prisma.lessons.upsert({
     *   create: {
     *     // ... data to create a Lessons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lessons we want to update
     *   }
     * })
     */
    upsert<T extends LessonsUpsertArgs>(args: SelectSubset<T, LessonsUpsertArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsCountArgs} args - Arguments to filter Lessons to count.
     * @example
     * // Count the number of Lessons
     * const count = await prisma.lessons.count({
     *   where: {
     *     // ... the filter for the Lessons we want to count
     *   }
     * })
    **/
    count<T extends LessonsCountArgs>(
      args?: Subset<T, LessonsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonsAggregateArgs>(args: Subset<T, LessonsAggregateArgs>): Prisma.PrismaPromise<GetLessonsAggregateType<T>>

    /**
     * Group by Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonsGroupByArgs['orderBy'] }
        : { orderBy?: LessonsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lessons model
   */
  readonly fields: LessonsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lessons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lessons model
   */ 
  interface LessonsFieldRefs {
    readonly id: FieldRef<"Lessons", 'String'>
    readonly course_id: FieldRef<"Lessons", 'String'>
    readonly title: FieldRef<"Lessons", 'String'>
    readonly description: FieldRef<"Lessons", 'String'>
    readonly content: FieldRef<"Lessons", 'String'>
    readonly created_at: FieldRef<"Lessons", 'DateTime'>
    readonly updated_at: FieldRef<"Lessons", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Lessons findUnique
   */
  export type LessonsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons findUniqueOrThrow
   */
  export type LessonsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons findFirst
   */
  export type LessonsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons findFirstOrThrow
   */
  export type LessonsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons findMany
   */
  export type LessonsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons create
   */
  export type LessonsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The data needed to create a Lessons.
     */
    data: XOR<LessonsCreateInput, LessonsUncheckedCreateInput>
  }

  /**
   * Lessons createMany
   */
  export type LessonsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lessons.
     */
    data: LessonsCreateManyInput | LessonsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lessons createManyAndReturn
   */
  export type LessonsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Lessons.
     */
    data: LessonsCreateManyInput | LessonsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lessons update
   */
  export type LessonsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The data needed to update a Lessons.
     */
    data: XOR<LessonsUpdateInput, LessonsUncheckedUpdateInput>
    /**
     * Choose, which Lessons to update.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons updateMany
   */
  export type LessonsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lessons.
     */
    data: XOR<LessonsUpdateManyMutationInput, LessonsUncheckedUpdateManyInput>
    /**
     * Filter which Lessons to update
     */
    where?: LessonsWhereInput
  }

  /**
   * Lessons upsert
   */
  export type LessonsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The filter to search for the Lessons to update in case it exists.
     */
    where: LessonsWhereUniqueInput
    /**
     * In case the Lessons found by the `where` argument doesn't exist, create a new Lessons with this data.
     */
    create: XOR<LessonsCreateInput, LessonsUncheckedCreateInput>
    /**
     * In case the Lessons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonsUpdateInput, LessonsUncheckedUpdateInput>
  }

  /**
   * Lessons delete
   */
  export type LessonsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter which Lessons to delete.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons deleteMany
   */
  export type LessonsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lessons to delete
     */
    where?: LessonsWhereInput
  }

  /**
   * Lessons without action
   */
  export type LessonsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
  }


  /**
   * Model Enrollments
   */

  export type AggregateEnrollments = {
    _count: EnrollmentsCountAggregateOutputType | null
    _avg: EnrollmentsAvgAggregateOutputType | null
    _sum: EnrollmentsSumAggregateOutputType | null
    _min: EnrollmentsMinAggregateOutputType | null
    _max: EnrollmentsMaxAggregateOutputType | null
  }

  export type EnrollmentsAvgAggregateOutputType = {
    completed_percent: number | null
  }

  export type EnrollmentsSumAggregateOutputType = {
    completed_percent: number | null
  }

  export type EnrollmentsMinAggregateOutputType = {
    id: string | null
    join_at: Date | null
    completed_percent: number | null
    user_id: string | null
    course_id: string | null
    status_id: string | null
  }

  export type EnrollmentsMaxAggregateOutputType = {
    id: string | null
    join_at: Date | null
    completed_percent: number | null
    user_id: string | null
    course_id: string | null
    status_id: string | null
  }

  export type EnrollmentsCountAggregateOutputType = {
    id: number
    join_at: number
    completed_percent: number
    user_id: number
    course_id: number
    status_id: number
    _all: number
  }


  export type EnrollmentsAvgAggregateInputType = {
    completed_percent?: true
  }

  export type EnrollmentsSumAggregateInputType = {
    completed_percent?: true
  }

  export type EnrollmentsMinAggregateInputType = {
    id?: true
    join_at?: true
    completed_percent?: true
    user_id?: true
    course_id?: true
    status_id?: true
  }

  export type EnrollmentsMaxAggregateInputType = {
    id?: true
    join_at?: true
    completed_percent?: true
    user_id?: true
    course_id?: true
    status_id?: true
  }

  export type EnrollmentsCountAggregateInputType = {
    id?: true
    join_at?: true
    completed_percent?: true
    user_id?: true
    course_id?: true
    status_id?: true
    _all?: true
  }

  export type EnrollmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to aggregate.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentsMaxAggregateInputType
  }

  export type GetEnrollmentsAggregateType<T extends EnrollmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollments[P]>
      : GetScalarType<T[P], AggregateEnrollments[P]>
  }




  export type EnrollmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithAggregationInput | EnrollmentsOrderByWithAggregationInput[]
    by: EnrollmentsScalarFieldEnum[] | EnrollmentsScalarFieldEnum
    having?: EnrollmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentsCountAggregateInputType | true
    _avg?: EnrollmentsAvgAggregateInputType
    _sum?: EnrollmentsSumAggregateInputType
    _min?: EnrollmentsMinAggregateInputType
    _max?: EnrollmentsMaxAggregateInputType
  }

  export type EnrollmentsGroupByOutputType = {
    id: string
    join_at: Date
    completed_percent: number
    user_id: string
    course_id: string
    status_id: string
    _count: EnrollmentsCountAggregateOutputType | null
    _avg: EnrollmentsAvgAggregateOutputType | null
    _sum: EnrollmentsSumAggregateOutputType | null
    _min: EnrollmentsMinAggregateOutputType | null
    _max: EnrollmentsMaxAggregateOutputType | null
  }

  type GetEnrollmentsGroupByPayload<T extends EnrollmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentsGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentsGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    join_at?: boolean
    completed_percent?: boolean
    user_id?: boolean
    course_id?: boolean
    status_id?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    statusEnrollment?: boolean | StatusEnrollmentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollments"]>

  export type EnrollmentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    join_at?: boolean
    completed_percent?: boolean
    user_id?: boolean
    course_id?: boolean
    status_id?: boolean
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    statusEnrollment?: boolean | StatusEnrollmentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollments"]>

  export type EnrollmentsSelectScalar = {
    id?: boolean
    join_at?: boolean
    completed_percent?: boolean
    user_id?: boolean
    course_id?: boolean
    status_id?: boolean
  }

  export type EnrollmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    statusEnrollment?: boolean | StatusEnrollmentsDefaultArgs<ExtArgs>
  }
  export type EnrollmentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CoursesDefaultArgs<ExtArgs>
    statusEnrollment?: boolean | StatusEnrollmentsDefaultArgs<ExtArgs>
  }

  export type $EnrollmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enrollments"
    objects: {
      course: Prisma.$CoursesPayload<ExtArgs>
      statusEnrollment: Prisma.$StatusEnrollmentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      join_at: Date
      completed_percent: number
      user_id: string
      course_id: string
      status_id: string
    }, ExtArgs["result"]["enrollments"]>
    composites: {}
  }

  type EnrollmentsGetPayload<S extends boolean | null | undefined | EnrollmentsDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentsPayload, S>

  type EnrollmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnrollmentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnrollmentsCountAggregateInputType | true
    }

  export interface EnrollmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enrollments'], meta: { name: 'Enrollments' } }
    /**
     * Find zero or one Enrollments that matches the filter.
     * @param {EnrollmentsFindUniqueArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnrollmentsFindUniqueArgs>(args: SelectSubset<T, EnrollmentsFindUniqueArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Enrollments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EnrollmentsFindUniqueOrThrowArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnrollmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, EnrollmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindFirstArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnrollmentsFindFirstArgs>(args?: SelectSubset<T, EnrollmentsFindFirstArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Enrollments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindFirstOrThrowArgs} args - Arguments to find a Enrollments
     * @example
     * // Get one Enrollments
     * const enrollments = await prisma.enrollments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnrollmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, EnrollmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollments.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrollmentsWithIdOnly = await prisma.enrollments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnrollmentsFindManyArgs>(args?: SelectSubset<T, EnrollmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Enrollments.
     * @param {EnrollmentsCreateArgs} args - Arguments to create a Enrollments.
     * @example
     * // Create one Enrollments
     * const Enrollments = await prisma.enrollments.create({
     *   data: {
     *     // ... data to create a Enrollments
     *   }
     * })
     * 
     */
    create<T extends EnrollmentsCreateArgs>(args: SelectSubset<T, EnrollmentsCreateArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Enrollments.
     * @param {EnrollmentsCreateManyArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollments = await prisma.enrollments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnrollmentsCreateManyArgs>(args?: SelectSubset<T, EnrollmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enrollments and returns the data saved in the database.
     * @param {EnrollmentsCreateManyAndReturnArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollments = await prisma.enrollments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enrollments and only return the `id`
     * const enrollmentsWithIdOnly = await prisma.enrollments.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnrollmentsCreateManyAndReturnArgs>(args?: SelectSubset<T, EnrollmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Enrollments.
     * @param {EnrollmentsDeleteArgs} args - Arguments to delete one Enrollments.
     * @example
     * // Delete one Enrollments
     * const Enrollments = await prisma.enrollments.delete({
     *   where: {
     *     // ... filter to delete one Enrollments
     *   }
     * })
     * 
     */
    delete<T extends EnrollmentsDeleteArgs>(args: SelectSubset<T, EnrollmentsDeleteArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Enrollments.
     * @param {EnrollmentsUpdateArgs} args - Arguments to update one Enrollments.
     * @example
     * // Update one Enrollments
     * const enrollments = await prisma.enrollments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnrollmentsUpdateArgs>(args: SelectSubset<T, EnrollmentsUpdateArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentsDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnrollmentsDeleteManyArgs>(args?: SelectSubset<T, EnrollmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollments = await prisma.enrollments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnrollmentsUpdateManyArgs>(args: SelectSubset<T, EnrollmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollments.
     * @param {EnrollmentsUpsertArgs} args - Arguments to update or create a Enrollments.
     * @example
     * // Update or create a Enrollments
     * const enrollments = await prisma.enrollments.upsert({
     *   create: {
     *     // ... data to create a Enrollments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollments we want to update
     *   }
     * })
     */
    upsert<T extends EnrollmentsUpsertArgs>(args: SelectSubset<T, EnrollmentsUpsertArgs<ExtArgs>>): Prisma__EnrollmentsClient<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollments.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentsCountArgs>(
      args?: Subset<T, EnrollmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentsAggregateArgs>(args: Subset<T, EnrollmentsAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentsAggregateType<T>>

    /**
     * Group by Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentsGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enrollments model
   */
  readonly fields: EnrollmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CoursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoursesDefaultArgs<ExtArgs>>): Prisma__CoursesClient<$Result.GetResult<Prisma.$CoursesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    statusEnrollment<T extends StatusEnrollmentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusEnrollmentsDefaultArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enrollments model
   */ 
  interface EnrollmentsFieldRefs {
    readonly id: FieldRef<"Enrollments", 'String'>
    readonly join_at: FieldRef<"Enrollments", 'DateTime'>
    readonly completed_percent: FieldRef<"Enrollments", 'Int'>
    readonly user_id: FieldRef<"Enrollments", 'String'>
    readonly course_id: FieldRef<"Enrollments", 'String'>
    readonly status_id: FieldRef<"Enrollments", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Enrollments findUnique
   */
  export type EnrollmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where: EnrollmentsWhereUniqueInput
  }

  /**
   * Enrollments findUniqueOrThrow
   */
  export type EnrollmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where: EnrollmentsWhereUniqueInput
  }

  /**
   * Enrollments findFirst
   */
  export type EnrollmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * Enrollments findFirstOrThrow
   */
  export type EnrollmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * Enrollments findMany
   */
  export type EnrollmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * Enrollments create
   */
  export type EnrollmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Enrollments.
     */
    data: XOR<EnrollmentsCreateInput, EnrollmentsUncheckedCreateInput>
  }

  /**
   * Enrollments createMany
   */
  export type EnrollmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentsCreateManyInput | EnrollmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enrollments createManyAndReturn
   */
  export type EnrollmentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentsCreateManyInput | EnrollmentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enrollments update
   */
  export type EnrollmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Enrollments.
     */
    data: XOR<EnrollmentsUpdateInput, EnrollmentsUncheckedUpdateInput>
    /**
     * Choose, which Enrollments to update.
     */
    where: EnrollmentsWhereUniqueInput
  }

  /**
   * Enrollments updateMany
   */
  export type EnrollmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentsWhereInput
  }

  /**
   * Enrollments upsert
   */
  export type EnrollmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Enrollments to update in case it exists.
     */
    where: EnrollmentsWhereUniqueInput
    /**
     * In case the Enrollments found by the `where` argument doesn't exist, create a new Enrollments with this data.
     */
    create: XOR<EnrollmentsCreateInput, EnrollmentsUncheckedCreateInput>
    /**
     * In case the Enrollments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentsUpdateInput, EnrollmentsUncheckedUpdateInput>
  }

  /**
   * Enrollments delete
   */
  export type EnrollmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    /**
     * Filter which Enrollments to delete.
     */
    where: EnrollmentsWhereUniqueInput
  }

  /**
   * Enrollments deleteMany
   */
  export type EnrollmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentsWhereInput
  }

  /**
   * Enrollments without action
   */
  export type EnrollmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
  }


  /**
   * Model StatusEnrollments
   */

  export type AggregateStatusEnrollments = {
    _count: StatusEnrollmentsCountAggregateOutputType | null
    _min: StatusEnrollmentsMinAggregateOutputType | null
    _max: StatusEnrollmentsMaxAggregateOutputType | null
  }

  export type StatusEnrollmentsMinAggregateOutputType = {
    id: string | null
    label: string | null
  }

  export type StatusEnrollmentsMaxAggregateOutputType = {
    id: string | null
    label: string | null
  }

  export type StatusEnrollmentsCountAggregateOutputType = {
    id: number
    label: number
    _all: number
  }


  export type StatusEnrollmentsMinAggregateInputType = {
    id?: true
    label?: true
  }

  export type StatusEnrollmentsMaxAggregateInputType = {
    id?: true
    label?: true
  }

  export type StatusEnrollmentsCountAggregateInputType = {
    id?: true
    label?: true
    _all?: true
  }

  export type StatusEnrollmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusEnrollments to aggregate.
     */
    where?: StatusEnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusEnrollments to fetch.
     */
    orderBy?: StatusEnrollmentsOrderByWithRelationInput | StatusEnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusEnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusEnrollments
    **/
    _count?: true | StatusEnrollmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusEnrollmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusEnrollmentsMaxAggregateInputType
  }

  export type GetStatusEnrollmentsAggregateType<T extends StatusEnrollmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusEnrollments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusEnrollments[P]>
      : GetScalarType<T[P], AggregateStatusEnrollments[P]>
  }




  export type StatusEnrollmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusEnrollmentsWhereInput
    orderBy?: StatusEnrollmentsOrderByWithAggregationInput | StatusEnrollmentsOrderByWithAggregationInput[]
    by: StatusEnrollmentsScalarFieldEnum[] | StatusEnrollmentsScalarFieldEnum
    having?: StatusEnrollmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusEnrollmentsCountAggregateInputType | true
    _min?: StatusEnrollmentsMinAggregateInputType
    _max?: StatusEnrollmentsMaxAggregateInputType
  }

  export type StatusEnrollmentsGroupByOutputType = {
    id: string
    label: string
    _count: StatusEnrollmentsCountAggregateOutputType | null
    _min: StatusEnrollmentsMinAggregateOutputType | null
    _max: StatusEnrollmentsMaxAggregateOutputType | null
  }

  type GetStatusEnrollmentsGroupByPayload<T extends StatusEnrollmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusEnrollmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusEnrollmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusEnrollmentsGroupByOutputType[P]>
            : GetScalarType<T[P], StatusEnrollmentsGroupByOutputType[P]>
        }
      >
    >


  export type StatusEnrollmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
    enrollments?: boolean | StatusEnrollments$enrollmentsArgs<ExtArgs>
    _count?: boolean | StatusEnrollmentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusEnrollments"]>

  export type StatusEnrollmentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    label?: boolean
  }, ExtArgs["result"]["statusEnrollments"]>

  export type StatusEnrollmentsSelectScalar = {
    id?: boolean
    label?: boolean
  }

  export type StatusEnrollmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | StatusEnrollments$enrollmentsArgs<ExtArgs>
    _count?: boolean | StatusEnrollmentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StatusEnrollmentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StatusEnrollmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusEnrollments"
    objects: {
      enrollments: Prisma.$EnrollmentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      label: string
    }, ExtArgs["result"]["statusEnrollments"]>
    composites: {}
  }

  type StatusEnrollmentsGetPayload<S extends boolean | null | undefined | StatusEnrollmentsDefaultArgs> = $Result.GetResult<Prisma.$StatusEnrollmentsPayload, S>

  type StatusEnrollmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusEnrollmentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatusEnrollmentsCountAggregateInputType | true
    }

  export interface StatusEnrollmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusEnrollments'], meta: { name: 'StatusEnrollments' } }
    /**
     * Find zero or one StatusEnrollments that matches the filter.
     * @param {StatusEnrollmentsFindUniqueArgs} args - Arguments to find a StatusEnrollments
     * @example
     * // Get one StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusEnrollmentsFindUniqueArgs>(args: SelectSubset<T, StatusEnrollmentsFindUniqueArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StatusEnrollments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StatusEnrollmentsFindUniqueOrThrowArgs} args - Arguments to find a StatusEnrollments
     * @example
     * // Get one StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusEnrollmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusEnrollmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StatusEnrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusEnrollmentsFindFirstArgs} args - Arguments to find a StatusEnrollments
     * @example
     * // Get one StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusEnrollmentsFindFirstArgs>(args?: SelectSubset<T, StatusEnrollmentsFindFirstArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StatusEnrollments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusEnrollmentsFindFirstOrThrowArgs} args - Arguments to find a StatusEnrollments
     * @example
     * // Get one StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusEnrollmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusEnrollmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StatusEnrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusEnrollmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.findMany()
     * 
     * // Get first 10 StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusEnrollmentsWithIdOnly = await prisma.statusEnrollments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusEnrollmentsFindManyArgs>(args?: SelectSubset<T, StatusEnrollmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StatusEnrollments.
     * @param {StatusEnrollmentsCreateArgs} args - Arguments to create a StatusEnrollments.
     * @example
     * // Create one StatusEnrollments
     * const StatusEnrollments = await prisma.statusEnrollments.create({
     *   data: {
     *     // ... data to create a StatusEnrollments
     *   }
     * })
     * 
     */
    create<T extends StatusEnrollmentsCreateArgs>(args: SelectSubset<T, StatusEnrollmentsCreateArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StatusEnrollments.
     * @param {StatusEnrollmentsCreateManyArgs} args - Arguments to create many StatusEnrollments.
     * @example
     * // Create many StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusEnrollmentsCreateManyArgs>(args?: SelectSubset<T, StatusEnrollmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StatusEnrollments and returns the data saved in the database.
     * @param {StatusEnrollmentsCreateManyAndReturnArgs} args - Arguments to create many StatusEnrollments.
     * @example
     * // Create many StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StatusEnrollments and only return the `id`
     * const statusEnrollmentsWithIdOnly = await prisma.statusEnrollments.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StatusEnrollmentsCreateManyAndReturnArgs>(args?: SelectSubset<T, StatusEnrollmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StatusEnrollments.
     * @param {StatusEnrollmentsDeleteArgs} args - Arguments to delete one StatusEnrollments.
     * @example
     * // Delete one StatusEnrollments
     * const StatusEnrollments = await prisma.statusEnrollments.delete({
     *   where: {
     *     // ... filter to delete one StatusEnrollments
     *   }
     * })
     * 
     */
    delete<T extends StatusEnrollmentsDeleteArgs>(args: SelectSubset<T, StatusEnrollmentsDeleteArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StatusEnrollments.
     * @param {StatusEnrollmentsUpdateArgs} args - Arguments to update one StatusEnrollments.
     * @example
     * // Update one StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusEnrollmentsUpdateArgs>(args: SelectSubset<T, StatusEnrollmentsUpdateArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StatusEnrollments.
     * @param {StatusEnrollmentsDeleteManyArgs} args - Arguments to filter StatusEnrollments to delete.
     * @example
     * // Delete a few StatusEnrollments
     * const { count } = await prisma.statusEnrollments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusEnrollmentsDeleteManyArgs>(args?: SelectSubset<T, StatusEnrollmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusEnrollmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusEnrollmentsUpdateManyArgs>(args: SelectSubset<T, StatusEnrollmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StatusEnrollments.
     * @param {StatusEnrollmentsUpsertArgs} args - Arguments to update or create a StatusEnrollments.
     * @example
     * // Update or create a StatusEnrollments
     * const statusEnrollments = await prisma.statusEnrollments.upsert({
     *   create: {
     *     // ... data to create a StatusEnrollments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusEnrollments we want to update
     *   }
     * })
     */
    upsert<T extends StatusEnrollmentsUpsertArgs>(args: SelectSubset<T, StatusEnrollmentsUpsertArgs<ExtArgs>>): Prisma__StatusEnrollmentsClient<$Result.GetResult<Prisma.$StatusEnrollmentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StatusEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusEnrollmentsCountArgs} args - Arguments to filter StatusEnrollments to count.
     * @example
     * // Count the number of StatusEnrollments
     * const count = await prisma.statusEnrollments.count({
     *   where: {
     *     // ... the filter for the StatusEnrollments we want to count
     *   }
     * })
    **/
    count<T extends StatusEnrollmentsCountArgs>(
      args?: Subset<T, StatusEnrollmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusEnrollmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusEnrollmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusEnrollmentsAggregateArgs>(args: Subset<T, StatusEnrollmentsAggregateArgs>): Prisma.PrismaPromise<GetStatusEnrollmentsAggregateType<T>>

    /**
     * Group by StatusEnrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusEnrollmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusEnrollmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusEnrollmentsGroupByArgs['orderBy'] }
        : { orderBy?: StatusEnrollmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusEnrollmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusEnrollmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusEnrollments model
   */
  readonly fields: StatusEnrollmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusEnrollments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusEnrollmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    enrollments<T extends StatusEnrollments$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, StatusEnrollments$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StatusEnrollments model
   */ 
  interface StatusEnrollmentsFieldRefs {
    readonly id: FieldRef<"StatusEnrollments", 'String'>
    readonly label: FieldRef<"StatusEnrollments", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StatusEnrollments findUnique
   */
  export type StatusEnrollmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which StatusEnrollments to fetch.
     */
    where: StatusEnrollmentsWhereUniqueInput
  }

  /**
   * StatusEnrollments findUniqueOrThrow
   */
  export type StatusEnrollmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which StatusEnrollments to fetch.
     */
    where: StatusEnrollmentsWhereUniqueInput
  }

  /**
   * StatusEnrollments findFirst
   */
  export type StatusEnrollmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which StatusEnrollments to fetch.
     */
    where?: StatusEnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusEnrollments to fetch.
     */
    orderBy?: StatusEnrollmentsOrderByWithRelationInput | StatusEnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusEnrollments.
     */
    cursor?: StatusEnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusEnrollments.
     */
    distinct?: StatusEnrollmentsScalarFieldEnum | StatusEnrollmentsScalarFieldEnum[]
  }

  /**
   * StatusEnrollments findFirstOrThrow
   */
  export type StatusEnrollmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which StatusEnrollments to fetch.
     */
    where?: StatusEnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusEnrollments to fetch.
     */
    orderBy?: StatusEnrollmentsOrderByWithRelationInput | StatusEnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusEnrollments.
     */
    cursor?: StatusEnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusEnrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusEnrollments.
     */
    distinct?: StatusEnrollmentsScalarFieldEnum | StatusEnrollmentsScalarFieldEnum[]
  }

  /**
   * StatusEnrollments findMany
   */
  export type StatusEnrollmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * Filter, which StatusEnrollments to fetch.
     */
    where?: StatusEnrollmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusEnrollments to fetch.
     */
    orderBy?: StatusEnrollmentsOrderByWithRelationInput | StatusEnrollmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusEnrollments.
     */
    cursor?: StatusEnrollmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusEnrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusEnrollments.
     */
    skip?: number
    distinct?: StatusEnrollmentsScalarFieldEnum | StatusEnrollmentsScalarFieldEnum[]
  }

  /**
   * StatusEnrollments create
   */
  export type StatusEnrollmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusEnrollments.
     */
    data: XOR<StatusEnrollmentsCreateInput, StatusEnrollmentsUncheckedCreateInput>
  }

  /**
   * StatusEnrollments createMany
   */
  export type StatusEnrollmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusEnrollments.
     */
    data: StatusEnrollmentsCreateManyInput | StatusEnrollmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusEnrollments createManyAndReturn
   */
  export type StatusEnrollmentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StatusEnrollments.
     */
    data: StatusEnrollmentsCreateManyInput | StatusEnrollmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusEnrollments update
   */
  export type StatusEnrollmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusEnrollments.
     */
    data: XOR<StatusEnrollmentsUpdateInput, StatusEnrollmentsUncheckedUpdateInput>
    /**
     * Choose, which StatusEnrollments to update.
     */
    where: StatusEnrollmentsWhereUniqueInput
  }

  /**
   * StatusEnrollments updateMany
   */
  export type StatusEnrollmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusEnrollments.
     */
    data: XOR<StatusEnrollmentsUpdateManyMutationInput, StatusEnrollmentsUncheckedUpdateManyInput>
    /**
     * Filter which StatusEnrollments to update
     */
    where?: StatusEnrollmentsWhereInput
  }

  /**
   * StatusEnrollments upsert
   */
  export type StatusEnrollmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusEnrollments to update in case it exists.
     */
    where: StatusEnrollmentsWhereUniqueInput
    /**
     * In case the StatusEnrollments found by the `where` argument doesn't exist, create a new StatusEnrollments with this data.
     */
    create: XOR<StatusEnrollmentsCreateInput, StatusEnrollmentsUncheckedCreateInput>
    /**
     * In case the StatusEnrollments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusEnrollmentsUpdateInput, StatusEnrollmentsUncheckedUpdateInput>
  }

  /**
   * StatusEnrollments delete
   */
  export type StatusEnrollmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
    /**
     * Filter which StatusEnrollments to delete.
     */
    where: StatusEnrollmentsWhereUniqueInput
  }

  /**
   * StatusEnrollments deleteMany
   */
  export type StatusEnrollmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusEnrollments to delete
     */
    where?: StatusEnrollmentsWhereInput
  }

  /**
   * StatusEnrollments.enrollments
   */
  export type StatusEnrollments$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollments
     */
    select?: EnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentsInclude<ExtArgs> | null
    where?: EnrollmentsWhereInput
    orderBy?: EnrollmentsOrderByWithRelationInput | EnrollmentsOrderByWithRelationInput[]
    cursor?: EnrollmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentsScalarFieldEnum | EnrollmentsScalarFieldEnum[]
  }

  /**
   * StatusEnrollments without action
   */
  export type StatusEnrollmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusEnrollments
     */
    select?: StatusEnrollmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusEnrollmentsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CoursesScalarFieldEnum: {
    id: 'id',
    author_id: 'author_id',
    title: 'title',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CoursesScalarFieldEnum = (typeof CoursesScalarFieldEnum)[keyof typeof CoursesScalarFieldEnum]


  export const LessonsScalarFieldEnum: {
    id: 'id',
    course_id: 'course_id',
    title: 'title',
    description: 'description',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LessonsScalarFieldEnum = (typeof LessonsScalarFieldEnum)[keyof typeof LessonsScalarFieldEnum]


  export const EnrollmentsScalarFieldEnum: {
    id: 'id',
    join_at: 'join_at',
    completed_percent: 'completed_percent',
    user_id: 'user_id',
    course_id: 'course_id',
    status_id: 'status_id'
  };

  export type EnrollmentsScalarFieldEnum = (typeof EnrollmentsScalarFieldEnum)[keyof typeof EnrollmentsScalarFieldEnum]


  export const StatusEnrollmentsScalarFieldEnum: {
    id: 'id',
    label: 'label'
  };

  export type StatusEnrollmentsScalarFieldEnum = (typeof StatusEnrollmentsScalarFieldEnum)[keyof typeof StatusEnrollmentsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CoursesWhereInput = {
    AND?: CoursesWhereInput | CoursesWhereInput[]
    OR?: CoursesWhereInput[]
    NOT?: CoursesWhereInput | CoursesWhereInput[]
    id?: StringFilter<"Courses"> | string
    author_id?: IntFilter<"Courses"> | number
    title?: StringFilter<"Courses"> | string
    description?: StringNullableFilter<"Courses"> | string | null
    created_at?: DateTimeFilter<"Courses"> | Date | string
    updated_at?: DateTimeFilter<"Courses"> | Date | string
    lessons?: LessonsListRelationFilter
    enrollments?: EnrollmentsListRelationFilter
  }

  export type CoursesOrderByWithRelationInput = {
    id?: SortOrder
    author_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    lessons?: LessonsOrderByRelationAggregateInput
    enrollments?: EnrollmentsOrderByRelationAggregateInput
  }

  export type CoursesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoursesWhereInput | CoursesWhereInput[]
    OR?: CoursesWhereInput[]
    NOT?: CoursesWhereInput | CoursesWhereInput[]
    author_id?: IntFilter<"Courses"> | number
    title?: StringFilter<"Courses"> | string
    description?: StringNullableFilter<"Courses"> | string | null
    created_at?: DateTimeFilter<"Courses"> | Date | string
    updated_at?: DateTimeFilter<"Courses"> | Date | string
    lessons?: LessonsListRelationFilter
    enrollments?: EnrollmentsListRelationFilter
  }, "id">

  export type CoursesOrderByWithAggregationInput = {
    id?: SortOrder
    author_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CoursesCountOrderByAggregateInput
    _avg?: CoursesAvgOrderByAggregateInput
    _max?: CoursesMaxOrderByAggregateInput
    _min?: CoursesMinOrderByAggregateInput
    _sum?: CoursesSumOrderByAggregateInput
  }

  export type CoursesScalarWhereWithAggregatesInput = {
    AND?: CoursesScalarWhereWithAggregatesInput | CoursesScalarWhereWithAggregatesInput[]
    OR?: CoursesScalarWhereWithAggregatesInput[]
    NOT?: CoursesScalarWhereWithAggregatesInput | CoursesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Courses"> | string
    author_id?: IntWithAggregatesFilter<"Courses"> | number
    title?: StringWithAggregatesFilter<"Courses"> | string
    description?: StringNullableWithAggregatesFilter<"Courses"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Courses"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Courses"> | Date | string
  }

  export type LessonsWhereInput = {
    AND?: LessonsWhereInput | LessonsWhereInput[]
    OR?: LessonsWhereInput[]
    NOT?: LessonsWhereInput | LessonsWhereInput[]
    id?: StringFilter<"Lessons"> | string
    course_id?: StringFilter<"Lessons"> | string
    title?: StringFilter<"Lessons"> | string
    description?: StringNullableFilter<"Lessons"> | string | null
    content?: StringFilter<"Lessons"> | string
    created_at?: DateTimeFilter<"Lessons"> | Date | string
    updated_at?: DateTimeFilter<"Lessons"> | Date | string
    course?: XOR<CoursesRelationFilter, CoursesWhereInput>
  }

  export type LessonsOrderByWithRelationInput = {
    id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    course?: CoursesOrderByWithRelationInput
  }

  export type LessonsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LessonsWhereInput | LessonsWhereInput[]
    OR?: LessonsWhereInput[]
    NOT?: LessonsWhereInput | LessonsWhereInput[]
    course_id?: StringFilter<"Lessons"> | string
    title?: StringFilter<"Lessons"> | string
    description?: StringNullableFilter<"Lessons"> | string | null
    content?: StringFilter<"Lessons"> | string
    created_at?: DateTimeFilter<"Lessons"> | Date | string
    updated_at?: DateTimeFilter<"Lessons"> | Date | string
    course?: XOR<CoursesRelationFilter, CoursesWhereInput>
  }, "id">

  export type LessonsOrderByWithAggregationInput = {
    id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LessonsCountOrderByAggregateInput
    _max?: LessonsMaxOrderByAggregateInput
    _min?: LessonsMinOrderByAggregateInput
  }

  export type LessonsScalarWhereWithAggregatesInput = {
    AND?: LessonsScalarWhereWithAggregatesInput | LessonsScalarWhereWithAggregatesInput[]
    OR?: LessonsScalarWhereWithAggregatesInput[]
    NOT?: LessonsScalarWhereWithAggregatesInput | LessonsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lessons"> | string
    course_id?: StringWithAggregatesFilter<"Lessons"> | string
    title?: StringWithAggregatesFilter<"Lessons"> | string
    description?: StringNullableWithAggregatesFilter<"Lessons"> | string | null
    content?: StringWithAggregatesFilter<"Lessons"> | string
    created_at?: DateTimeWithAggregatesFilter<"Lessons"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Lessons"> | Date | string
  }

  export type EnrollmentsWhereInput = {
    AND?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    OR?: EnrollmentsWhereInput[]
    NOT?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    id?: StringFilter<"Enrollments"> | string
    join_at?: DateTimeFilter<"Enrollments"> | Date | string
    completed_percent?: IntFilter<"Enrollments"> | number
    user_id?: StringFilter<"Enrollments"> | string
    course_id?: StringFilter<"Enrollments"> | string
    status_id?: StringFilter<"Enrollments"> | string
    course?: XOR<CoursesRelationFilter, CoursesWhereInput>
    statusEnrollment?: XOR<StatusEnrollmentsRelationFilter, StatusEnrollmentsWhereInput>
  }

  export type EnrollmentsOrderByWithRelationInput = {
    id?: SortOrder
    join_at?: SortOrder
    completed_percent?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    status_id?: SortOrder
    course?: CoursesOrderByWithRelationInput
    statusEnrollment?: StatusEnrollmentsOrderByWithRelationInput
  }

  export type EnrollmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    OR?: EnrollmentsWhereInput[]
    NOT?: EnrollmentsWhereInput | EnrollmentsWhereInput[]
    join_at?: DateTimeFilter<"Enrollments"> | Date | string
    completed_percent?: IntFilter<"Enrollments"> | number
    user_id?: StringFilter<"Enrollments"> | string
    course_id?: StringFilter<"Enrollments"> | string
    status_id?: StringFilter<"Enrollments"> | string
    course?: XOR<CoursesRelationFilter, CoursesWhereInput>
    statusEnrollment?: XOR<StatusEnrollmentsRelationFilter, StatusEnrollmentsWhereInput>
  }, "id">

  export type EnrollmentsOrderByWithAggregationInput = {
    id?: SortOrder
    join_at?: SortOrder
    completed_percent?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    status_id?: SortOrder
    _count?: EnrollmentsCountOrderByAggregateInput
    _avg?: EnrollmentsAvgOrderByAggregateInput
    _max?: EnrollmentsMaxOrderByAggregateInput
    _min?: EnrollmentsMinOrderByAggregateInput
    _sum?: EnrollmentsSumOrderByAggregateInput
  }

  export type EnrollmentsScalarWhereWithAggregatesInput = {
    AND?: EnrollmentsScalarWhereWithAggregatesInput | EnrollmentsScalarWhereWithAggregatesInput[]
    OR?: EnrollmentsScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentsScalarWhereWithAggregatesInput | EnrollmentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Enrollments"> | string
    join_at?: DateTimeWithAggregatesFilter<"Enrollments"> | Date | string
    completed_percent?: IntWithAggregatesFilter<"Enrollments"> | number
    user_id?: StringWithAggregatesFilter<"Enrollments"> | string
    course_id?: StringWithAggregatesFilter<"Enrollments"> | string
    status_id?: StringWithAggregatesFilter<"Enrollments"> | string
  }

  export type StatusEnrollmentsWhereInput = {
    AND?: StatusEnrollmentsWhereInput | StatusEnrollmentsWhereInput[]
    OR?: StatusEnrollmentsWhereInput[]
    NOT?: StatusEnrollmentsWhereInput | StatusEnrollmentsWhereInput[]
    id?: StringFilter<"StatusEnrollments"> | string
    label?: StringFilter<"StatusEnrollments"> | string
    enrollments?: EnrollmentsListRelationFilter
  }

  export type StatusEnrollmentsOrderByWithRelationInput = {
    id?: SortOrder
    label?: SortOrder
    enrollments?: EnrollmentsOrderByRelationAggregateInput
  }

  export type StatusEnrollmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StatusEnrollmentsWhereInput | StatusEnrollmentsWhereInput[]
    OR?: StatusEnrollmentsWhereInput[]
    NOT?: StatusEnrollmentsWhereInput | StatusEnrollmentsWhereInput[]
    label?: StringFilter<"StatusEnrollments"> | string
    enrollments?: EnrollmentsListRelationFilter
  }, "id">

  export type StatusEnrollmentsOrderByWithAggregationInput = {
    id?: SortOrder
    label?: SortOrder
    _count?: StatusEnrollmentsCountOrderByAggregateInput
    _max?: StatusEnrollmentsMaxOrderByAggregateInput
    _min?: StatusEnrollmentsMinOrderByAggregateInput
  }

  export type StatusEnrollmentsScalarWhereWithAggregatesInput = {
    AND?: StatusEnrollmentsScalarWhereWithAggregatesInput | StatusEnrollmentsScalarWhereWithAggregatesInput[]
    OR?: StatusEnrollmentsScalarWhereWithAggregatesInput[]
    NOT?: StatusEnrollmentsScalarWhereWithAggregatesInput | StatusEnrollmentsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StatusEnrollments"> | string
    label?: StringWithAggregatesFilter<"StatusEnrollments"> | string
  }

  export type CoursesCreateInput = {
    id?: string
    author_id: number
    title: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateInput = {
    id?: string
    author_id: number
    title: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CoursesCreateManyInput = {
    id?: string
    author_id: number
    title: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CoursesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonsCreateInput = {
    id?: string
    title: string
    description?: string | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
    course: CoursesCreateNestedOneWithoutLessonsInput
  }

  export type LessonsUncheckedCreateInput = {
    id?: string
    course_id: string
    title: string
    description?: string | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LessonsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CoursesUpdateOneRequiredWithoutLessonsNestedInput
  }

  export type LessonsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonsCreateManyInput = {
    id?: string
    course_id: string
    title: string
    description?: string | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LessonsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsCreateInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    course: CoursesCreateNestedOneWithoutEnrollmentsInput
    statusEnrollment: StatusEnrollmentsCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    course_id: string
    status_id: string
  }

  export type EnrollmentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    course?: CoursesUpdateOneRequiredWithoutEnrollmentsNestedInput
    statusEnrollment?: StatusEnrollmentsUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
  }

  export type EnrollmentsCreateManyInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    course_id: string
    status_id: string
  }

  export type EnrollmentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type EnrollmentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
  }

  export type StatusEnrollmentsCreateInput = {
    id?: string
    label: string
    enrollments?: EnrollmentsCreateNestedManyWithoutStatusEnrollmentInput
  }

  export type StatusEnrollmentsUncheckedCreateInput = {
    id?: string
    label: string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutStatusEnrollmentInput
  }

  export type StatusEnrollmentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUpdateManyWithoutStatusEnrollmentNestedInput
  }

  export type StatusEnrollmentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutStatusEnrollmentNestedInput
  }

  export type StatusEnrollmentsCreateManyInput = {
    id?: string
    label: string
  }

  export type StatusEnrollmentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StatusEnrollmentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LessonsListRelationFilter = {
    every?: LessonsWhereInput
    some?: LessonsWhereInput
    none?: LessonsWhereInput
  }

  export type EnrollmentsListRelationFilter = {
    every?: EnrollmentsWhereInput
    some?: EnrollmentsWhereInput
    none?: EnrollmentsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LessonsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnrollmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoursesCountOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoursesAvgOrderByAggregateInput = {
    author_id?: SortOrder
  }

  export type CoursesMaxOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoursesMinOrderByAggregateInput = {
    id?: SortOrder
    author_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CoursesSumOrderByAggregateInput = {
    author_id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CoursesRelationFilter = {
    is?: CoursesWhereInput
    isNot?: CoursesWhereInput
  }

  export type LessonsCountOrderByAggregateInput = {
    id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LessonsMaxOrderByAggregateInput = {
    id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LessonsMinOrderByAggregateInput = {
    id?: SortOrder
    course_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StatusEnrollmentsRelationFilter = {
    is?: StatusEnrollmentsWhereInput
    isNot?: StatusEnrollmentsWhereInput
  }

  export type EnrollmentsCountOrderByAggregateInput = {
    id?: SortOrder
    join_at?: SortOrder
    completed_percent?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    status_id?: SortOrder
  }

  export type EnrollmentsAvgOrderByAggregateInput = {
    completed_percent?: SortOrder
  }

  export type EnrollmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    join_at?: SortOrder
    completed_percent?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    status_id?: SortOrder
  }

  export type EnrollmentsMinOrderByAggregateInput = {
    id?: SortOrder
    join_at?: SortOrder
    completed_percent?: SortOrder
    user_id?: SortOrder
    course_id?: SortOrder
    status_id?: SortOrder
  }

  export type EnrollmentsSumOrderByAggregateInput = {
    completed_percent?: SortOrder
  }

  export type StatusEnrollmentsCountOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type StatusEnrollmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type StatusEnrollmentsMinOrderByAggregateInput = {
    id?: SortOrder
    label?: SortOrder
  }

  export type LessonsCreateNestedManyWithoutCourseInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
  }

  export type EnrollmentsCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type LessonsUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
  }

  export type EnrollmentsUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LessonsUpdateManyWithoutCourseNestedInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    upsert?: LessonsUpsertWithWhereUniqueWithoutCourseInput | LessonsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    set?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    disconnect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    delete?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    update?: LessonsUpdateWithWhereUniqueWithoutCourseInput | LessonsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: LessonsUpdateManyWithWhereWithoutCourseInput | LessonsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
  }

  export type EnrollmentsUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutCourseInput | EnrollmentsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutCourseInput | EnrollmentsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutCourseInput | EnrollmentsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type LessonsUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    upsert?: LessonsUpsertWithWhereUniqueWithoutCourseInput | LessonsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    set?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    disconnect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    delete?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    update?: LessonsUpdateWithWhereUniqueWithoutCourseInput | LessonsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: LessonsUpdateManyWithWhereWithoutCourseInput | LessonsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
  }

  export type EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput> | EnrollmentsCreateWithoutCourseInput[] | EnrollmentsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutCourseInput | EnrollmentsCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutCourseInput | EnrollmentsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentsCreateManyCourseInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutCourseInput | EnrollmentsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutCourseInput | EnrollmentsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type CoursesCreateNestedOneWithoutLessonsInput = {
    create?: XOR<CoursesCreateWithoutLessonsInput, CoursesUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutLessonsInput
    connect?: CoursesWhereUniqueInput
  }

  export type CoursesUpdateOneRequiredWithoutLessonsNestedInput = {
    create?: XOR<CoursesCreateWithoutLessonsInput, CoursesUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutLessonsInput
    upsert?: CoursesUpsertWithoutLessonsInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutLessonsInput, CoursesUpdateWithoutLessonsInput>, CoursesUncheckedUpdateWithoutLessonsInput>
  }

  export type CoursesCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<CoursesCreateWithoutEnrollmentsInput, CoursesUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutEnrollmentsInput
    connect?: CoursesWhereUniqueInput
  }

  export type StatusEnrollmentsCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<StatusEnrollmentsCreateWithoutEnrollmentsInput, StatusEnrollmentsUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: StatusEnrollmentsCreateOrConnectWithoutEnrollmentsInput
    connect?: StatusEnrollmentsWhereUniqueInput
  }

  export type CoursesUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<CoursesCreateWithoutEnrollmentsInput, CoursesUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CoursesCreateOrConnectWithoutEnrollmentsInput
    upsert?: CoursesUpsertWithoutEnrollmentsInput
    connect?: CoursesWhereUniqueInput
    update?: XOR<XOR<CoursesUpdateToOneWithWhereWithoutEnrollmentsInput, CoursesUpdateWithoutEnrollmentsInput>, CoursesUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type StatusEnrollmentsUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<StatusEnrollmentsCreateWithoutEnrollmentsInput, StatusEnrollmentsUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: StatusEnrollmentsCreateOrConnectWithoutEnrollmentsInput
    upsert?: StatusEnrollmentsUpsertWithoutEnrollmentsInput
    connect?: StatusEnrollmentsWhereUniqueInput
    update?: XOR<XOR<StatusEnrollmentsUpdateToOneWithWhereWithoutEnrollmentsInput, StatusEnrollmentsUpdateWithoutEnrollmentsInput>, StatusEnrollmentsUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type EnrollmentsCreateNestedManyWithoutStatusEnrollmentInput = {
    create?: XOR<EnrollmentsCreateWithoutStatusEnrollmentInput, EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput> | EnrollmentsCreateWithoutStatusEnrollmentInput[] | EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput | EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput[]
    createMany?: EnrollmentsCreateManyStatusEnrollmentInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type EnrollmentsUncheckedCreateNestedManyWithoutStatusEnrollmentInput = {
    create?: XOR<EnrollmentsCreateWithoutStatusEnrollmentInput, EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput> | EnrollmentsCreateWithoutStatusEnrollmentInput[] | EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput | EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput[]
    createMany?: EnrollmentsCreateManyStatusEnrollmentInputEnvelope
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
  }

  export type EnrollmentsUpdateManyWithoutStatusEnrollmentNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutStatusEnrollmentInput, EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput> | EnrollmentsCreateWithoutStatusEnrollmentInput[] | EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput | EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutStatusEnrollmentInput | EnrollmentsUpsertWithWhereUniqueWithoutStatusEnrollmentInput[]
    createMany?: EnrollmentsCreateManyStatusEnrollmentInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutStatusEnrollmentInput | EnrollmentsUpdateWithWhereUniqueWithoutStatusEnrollmentInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutStatusEnrollmentInput | EnrollmentsUpdateManyWithWhereWithoutStatusEnrollmentInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type EnrollmentsUncheckedUpdateManyWithoutStatusEnrollmentNestedInput = {
    create?: XOR<EnrollmentsCreateWithoutStatusEnrollmentInput, EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput> | EnrollmentsCreateWithoutStatusEnrollmentInput[] | EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput[]
    connectOrCreate?: EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput | EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput[]
    upsert?: EnrollmentsUpsertWithWhereUniqueWithoutStatusEnrollmentInput | EnrollmentsUpsertWithWhereUniqueWithoutStatusEnrollmentInput[]
    createMany?: EnrollmentsCreateManyStatusEnrollmentInputEnvelope
    set?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    disconnect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    delete?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    connect?: EnrollmentsWhereUniqueInput | EnrollmentsWhereUniqueInput[]
    update?: EnrollmentsUpdateWithWhereUniqueWithoutStatusEnrollmentInput | EnrollmentsUpdateWithWhereUniqueWithoutStatusEnrollmentInput[]
    updateMany?: EnrollmentsUpdateManyWithWhereWithoutStatusEnrollmentInput | EnrollmentsUpdateManyWithWhereWithoutStatusEnrollmentInput[]
    deleteMany?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type LessonsCreateWithoutCourseInput = {
    id?: string
    title: string
    description?: string | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LessonsUncheckedCreateWithoutCourseInput = {
    id?: string
    title: string
    description?: string | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LessonsCreateOrConnectWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    create: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput>
  }

  export type LessonsCreateManyCourseInputEnvelope = {
    data: LessonsCreateManyCourseInput | LessonsCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentsCreateWithoutCourseInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    statusEnrollment: StatusEnrollmentsCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateWithoutCourseInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    status_id: string
  }

  export type EnrollmentsCreateOrConnectWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    create: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentsCreateManyCourseInputEnvelope = {
    data: EnrollmentsCreateManyCourseInput | EnrollmentsCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type LessonsUpsertWithWhereUniqueWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    update: XOR<LessonsUpdateWithoutCourseInput, LessonsUncheckedUpdateWithoutCourseInput>
    create: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput>
  }

  export type LessonsUpdateWithWhereUniqueWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    data: XOR<LessonsUpdateWithoutCourseInput, LessonsUncheckedUpdateWithoutCourseInput>
  }

  export type LessonsUpdateManyWithWhereWithoutCourseInput = {
    where: LessonsScalarWhereInput
    data: XOR<LessonsUpdateManyMutationInput, LessonsUncheckedUpdateManyWithoutCourseInput>
  }

  export type LessonsScalarWhereInput = {
    AND?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
    OR?: LessonsScalarWhereInput[]
    NOT?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
    id?: StringFilter<"Lessons"> | string
    course_id?: StringFilter<"Lessons"> | string
    title?: StringFilter<"Lessons"> | string
    description?: StringNullableFilter<"Lessons"> | string | null
    content?: StringFilter<"Lessons"> | string
    created_at?: DateTimeFilter<"Lessons"> | Date | string
    updated_at?: DateTimeFilter<"Lessons"> | Date | string
  }

  export type EnrollmentsUpsertWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    update: XOR<EnrollmentsUpdateWithoutCourseInput, EnrollmentsUncheckedUpdateWithoutCourseInput>
    create: XOR<EnrollmentsCreateWithoutCourseInput, EnrollmentsUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentsUpdateWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentsWhereUniqueInput
    data: XOR<EnrollmentsUpdateWithoutCourseInput, EnrollmentsUncheckedUpdateWithoutCourseInput>
  }

  export type EnrollmentsUpdateManyWithWhereWithoutCourseInput = {
    where: EnrollmentsScalarWhereInput
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyWithoutCourseInput>
  }

  export type EnrollmentsScalarWhereInput = {
    AND?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
    OR?: EnrollmentsScalarWhereInput[]
    NOT?: EnrollmentsScalarWhereInput | EnrollmentsScalarWhereInput[]
    id?: StringFilter<"Enrollments"> | string
    join_at?: DateTimeFilter<"Enrollments"> | Date | string
    completed_percent?: IntFilter<"Enrollments"> | number
    user_id?: StringFilter<"Enrollments"> | string
    course_id?: StringFilter<"Enrollments"> | string
    status_id?: StringFilter<"Enrollments"> | string
  }

  export type CoursesCreateWithoutLessonsInput = {
    id?: string
    author_id: number
    title: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    enrollments?: EnrollmentsCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutLessonsInput = {
    id?: string
    author_id: number
    title: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    enrollments?: EnrollmentsUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutLessonsInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutLessonsInput, CoursesUncheckedCreateWithoutLessonsInput>
  }

  export type CoursesUpsertWithoutLessonsInput = {
    update: XOR<CoursesUpdateWithoutLessonsInput, CoursesUncheckedUpdateWithoutLessonsInput>
    create: XOR<CoursesCreateWithoutLessonsInput, CoursesUncheckedCreateWithoutLessonsInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutLessonsInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutLessonsInput, CoursesUncheckedUpdateWithoutLessonsInput>
  }

  export type CoursesUpdateWithoutLessonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutLessonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollments?: EnrollmentsUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CoursesCreateWithoutEnrollmentsInput = {
    id?: string
    author_id: number
    title: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    lessons?: LessonsCreateNestedManyWithoutCourseInput
  }

  export type CoursesUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    author_id: number
    title: string
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CoursesCreateOrConnectWithoutEnrollmentsInput = {
    where: CoursesWhereUniqueInput
    create: XOR<CoursesCreateWithoutEnrollmentsInput, CoursesUncheckedCreateWithoutEnrollmentsInput>
  }

  export type StatusEnrollmentsCreateWithoutEnrollmentsInput = {
    id?: string
    label: string
  }

  export type StatusEnrollmentsUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    label: string
  }

  export type StatusEnrollmentsCreateOrConnectWithoutEnrollmentsInput = {
    where: StatusEnrollmentsWhereUniqueInput
    create: XOR<StatusEnrollmentsCreateWithoutEnrollmentsInput, StatusEnrollmentsUncheckedCreateWithoutEnrollmentsInput>
  }

  export type CoursesUpsertWithoutEnrollmentsInput = {
    update: XOR<CoursesUpdateWithoutEnrollmentsInput, CoursesUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<CoursesCreateWithoutEnrollmentsInput, CoursesUncheckedCreateWithoutEnrollmentsInput>
    where?: CoursesWhereInput
  }

  export type CoursesUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: CoursesWhereInput
    data: XOR<CoursesUpdateWithoutEnrollmentsInput, CoursesUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CoursesUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
  }

  export type CoursesUncheckedUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    author_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type StatusEnrollmentsUpsertWithoutEnrollmentsInput = {
    update: XOR<StatusEnrollmentsUpdateWithoutEnrollmentsInput, StatusEnrollmentsUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<StatusEnrollmentsCreateWithoutEnrollmentsInput, StatusEnrollmentsUncheckedCreateWithoutEnrollmentsInput>
    where?: StatusEnrollmentsWhereInput
  }

  export type StatusEnrollmentsUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: StatusEnrollmentsWhereInput
    data: XOR<StatusEnrollmentsUpdateWithoutEnrollmentsInput, StatusEnrollmentsUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type StatusEnrollmentsUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StatusEnrollmentsUncheckedUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type EnrollmentsCreateWithoutStatusEnrollmentInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    course: CoursesCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    course_id: string
  }

  export type EnrollmentsCreateOrConnectWithoutStatusEnrollmentInput = {
    where: EnrollmentsWhereUniqueInput
    create: XOR<EnrollmentsCreateWithoutStatusEnrollmentInput, EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput>
  }

  export type EnrollmentsCreateManyStatusEnrollmentInputEnvelope = {
    data: EnrollmentsCreateManyStatusEnrollmentInput | EnrollmentsCreateManyStatusEnrollmentInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentsUpsertWithWhereUniqueWithoutStatusEnrollmentInput = {
    where: EnrollmentsWhereUniqueInput
    update: XOR<EnrollmentsUpdateWithoutStatusEnrollmentInput, EnrollmentsUncheckedUpdateWithoutStatusEnrollmentInput>
    create: XOR<EnrollmentsCreateWithoutStatusEnrollmentInput, EnrollmentsUncheckedCreateWithoutStatusEnrollmentInput>
  }

  export type EnrollmentsUpdateWithWhereUniqueWithoutStatusEnrollmentInput = {
    where: EnrollmentsWhereUniqueInput
    data: XOR<EnrollmentsUpdateWithoutStatusEnrollmentInput, EnrollmentsUncheckedUpdateWithoutStatusEnrollmentInput>
  }

  export type EnrollmentsUpdateManyWithWhereWithoutStatusEnrollmentInput = {
    where: EnrollmentsScalarWhereInput
    data: XOR<EnrollmentsUpdateManyMutationInput, EnrollmentsUncheckedUpdateManyWithoutStatusEnrollmentInput>
  }

  export type LessonsCreateManyCourseInput = {
    id?: string
    title: string
    description?: string | null
    content: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EnrollmentsCreateManyCourseInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    status_id: string
  }

  export type LessonsUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonsUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LessonsUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentsUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    statusEnrollment?: StatusEnrollmentsUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
  }

  export type EnrollmentsUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    status_id?: StringFieldUpdateOperationsInput | string
  }

  export type EnrollmentsCreateManyStatusEnrollmentInput = {
    id?: string
    join_at?: Date | string
    completed_percent: number
    user_id: string
    course_id: string
  }

  export type EnrollmentsUpdateWithoutStatusEnrollmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    course?: CoursesUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentsUncheckedUpdateWithoutStatusEnrollmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
  }

  export type EnrollmentsUncheckedUpdateManyWithoutStatusEnrollmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    join_at?: DateTimeFieldUpdateOperationsInput | Date | string
    completed_percent?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    course_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CoursesCountOutputTypeDefaultArgs instead
     */
    export type CoursesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoursesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusEnrollmentsCountOutputTypeDefaultArgs instead
     */
    export type StatusEnrollmentsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusEnrollmentsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoursesDefaultArgs instead
     */
    export type CoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoursesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LessonsDefaultArgs instead
     */
    export type LessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LessonsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnrollmentsDefaultArgs instead
     */
    export type EnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnrollmentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusEnrollmentsDefaultArgs instead
     */
    export type StatusEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusEnrollmentsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}