generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answer_types {
  id        String      @id
  label     String      @unique
  questions questions[]
}

model answers {
  id                                             String     @id
  answer_text                                    String
  created_at                                     DateTime?  @default(now())
  updated_at                                     DateTime?
  question_id                                    String?
  questions_answers_question_idToquestions       questions? @relation("answers_question_idToquestions", fields: [question_id], references: [id], onDelete: Cascade)
  questions_questions_correct_answer_idToanswers questions? @relation("questions_correct_answer_idToanswers")
}

model attempts_pass {
  id           String         @id
  test_id      String?
  user_id      String?
  attempt      Int
  created_at   DateTime?      @default(now())
  tests        tests?         @relation(fields: [test_id], references: [id], onDelete: Cascade)
  users        users?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_answers user_answers[]
}

model courses {
  id          String        @id
  author_id   String?
  title       String
  description String
  created_at  DateTime?     @default(now())
  updated_at  DateTime?
  users       users?        @relation(fields: [author_id], references: [id], onDelete: Cascade)
  enrollments enrollments[]
  lessons     lessons[]
}

model enrollments {
  id                 String              @id
  join_at            DateTime?           @default(now())
  completed_percent  Int
  user_id            String?
  course_id          String?
  status_id          String?
  courses            courses?            @relation(fields: [course_id], references: [id], onDelete: Cascade)
  status_enrollments status_enrollments? @relation(fields: [status_id], references: [id], onDelete: Cascade)
  users              users?              @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model lessons {
  id          String    @id
  course_id   String?
  title       String
  description String
  content     String
  created_at  DateTime? @default(now())
  updated_at  DateTime?
  courses     courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade)
  tests       tests?
}

model passwords {
  id      String @id
  salt    String
  hash    String
  user_id String @unique
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([salt, hash])
}

model questions {
  id                                           String         @id
  question_text                                String
  answer_type_id                               String?
  test_id                                      String?
  correct_answer_id                            String         @unique
  created_at                                   DateTime?      @default(now())
  updated_at                                   DateTime?
  answers_answers_question_idToquestions       answers[]      @relation("answers_question_idToquestions")
  answer_types                                 answer_types?  @relation(fields: [answer_type_id], references: [id], onDelete: Cascade)
  answers_questions_correct_answer_idToanswers answers        @relation("questions_correct_answer_idToanswers", fields: [correct_answer_id], references: [id], onDelete: Cascade)
  tests                                        tests?         @relation(fields: [test_id], references: [id], onDelete: Cascade)
  user_answers                                 user_answers[]
}

model roles {
  id    String  @id
  label String  @unique
  users users[]
}

model status_enrollments {
  id          String        @id
  label       String        @unique
  enrollments enrollments[]
}

model tests {
  id            String          @id
  title         String
  description   String
  created_at    DateTime?       @default(now())
  updated_at    DateTime?
  lesson_id     String          @unique
  attempts_pass attempts_pass[]
  questions     questions[]
  lessons       lessons         @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
}

model user_answers {
  id              String         @id
  questions_id    String?
  attempt_pass_id String?
  answer_text     String
  is_correct      Boolean        @default(false)
  created_at      DateTime?      @default(now())
  attempts_pass   attempts_pass? @relation(fields: [attempt_pass_id], references: [id], onDelete: Cascade)
  questions       questions?     @relation(fields: [questions_id], references: [id], onDelete: Cascade)
}

model users {
  id            String          @id
  showed_id     String          @unique
  email         String          @unique
  first_name    String
  last_name     String
  middle_name   String?         @default("")
  phone_number  String          @unique
  created_at    DateTime?       @default(now())
  updated_at    DateTime?
  role_id       String
  attempts_pass attempts_pass[]
  courses       courses[]
  enrollments   enrollments[]
  passwords     passwords?
  roles         roles           @relation(fields: [role_id], references: [id], onDelete: Cascade)
}
